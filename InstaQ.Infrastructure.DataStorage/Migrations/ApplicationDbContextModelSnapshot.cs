// <auto-generated />
using System;
using InstaQ.Infrastructure.DataStorage.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InstaQ.Infrastructure.DataStorage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("ElementModelSequence");

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.LinkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.LogModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.ParticipantModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vip")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ParentParticipantId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ElementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ElementModelSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ReportModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountRequests")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSucceeded")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLoaded")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerPk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.TransactionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTimeOffset?>("ConfirmationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentSystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PaymentSystemUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParticipantsType")
                        .HasColumnType("int");

                    b.Property<string>("TargetPk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PublicationReportModelUserModel", b =>
                {
                    b.Property<Guid>("LinkedUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublicationReportModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinkedUsersId", "PublicationReportModelId");

                    b.HasIndex("PublicationReportModelId");

                    b.ToTable("PublicationReportModelUserModel");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.CommentReport.CommentReportElementModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ElementModel");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LikeChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vip")
                        .HasColumnType("bit");

                    b.HasIndex("ReportId");

                    b.ToTable("CommentReportElements");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.LikeReport.LikeReportElementModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ElementModel");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LikeChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Likes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vip")
                        .HasColumnType("bit");

                    b.HasIndex("ReportId");

                    b.ToTable("LikeReportElements");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.ParticipantReport.ParticipantReportElementModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ElementModel");

                    b.Property<string>("NewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasIndex("ReportId");

                    b.ToTable("ParticipantReportElements");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.ParticipantReport.ParticipantReportModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ReportModel");

                    b.Property<string>("Pk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("ParticipantReports");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ReportModel");

                    b.Property<bool>("AllParticipants")
                        .HasColumnType("bit");

                    b.Property<int>("CountPublicationsToGet")
                        .HasColumnType("int");

                    b.Property<string>("Hashtag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Process")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.CommentReport.CommentReportModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.LikeReport.LikeReportModel", b =>
                {
                    b.HasBaseType("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel");

                    b.ToTable("LikeReports");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.LinkModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.LogModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.ParticipantModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.ParticipantModel", "ParentParticipant")
                        .WithMany()
                        .HasForeignKey("ParentParticipantId");

                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentParticipant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.Base.ReportModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel", "Report")
                        .WithMany("Publications")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.TransactionModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PublicationReportModelUserModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("LinkedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel", null)
                        .WithMany()
                        .HasForeignKey("PublicationReportModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.CommentReport.CommentReportElementModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.Reports.CommentReport.CommentReportModel", "Report")
                        .WithMany("ElementsList")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.LikeReport.LikeReportElementModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.Reports.LikeReport.LikeReportModel", "Report")
                        .WithMany("ElementsList")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.ParticipantReport.ParticipantReportElementModel", b =>
                {
                    b.HasOne("InstaQ.Infrastructure.DataStorage.Models.Reports.ParticipantReport.ParticipantReportModel", "Report")
                        .WithMany("ElementsList")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.ParticipantReport.ParticipantReportModel", b =>
                {
                    b.Navigation("ElementsList");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.PublicationReport.PublicationReportModel", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.CommentReport.CommentReportModel", b =>
                {
                    b.Navigation("ElementsList");
                });

            modelBuilder.Entity("InstaQ.Infrastructure.DataStorage.Models.Reports.LikeReport.LikeReportModel", b =>
                {
                    b.Navigation("ElementsList");
                });
#pragma warning restore 612, 618
        }
    }
}
